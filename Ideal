{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Подготовка данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Импорт данных:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('train.csv')\n",
    "test_data = pd.read_csv('test.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Функция подготовки данных по признакам `HouseFloor` и `Floor`:\n",
    "1. если этаж квартиры больше этажности дома, то значения этаж-этажность меняютс местами\n",
    "2. если этажность дома больше порогового значения `threshold` (по умолчанию 50), то этажность принимается равной этажу квартиры\n",
    "3. нулевая этажность дома приравнивается к этажу дома\n",
    "4. нулевые этажи приравниваются первому этажу\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prepare_floor_house_floor(df, threshold=50):\n",
    "    _ind = df.loc[df['Floor']>df['HouseFloor'],:].index\n",
    "    _var = df.loc[df['Floor']>df['HouseFloor'],['HouseFloor','Floor']]\n",
    "    df.loc[_ind,'Floor'] = _var['HouseFloor']\n",
    "    df.loc[_ind,'HouseFloor'] = _var['Floor']\n",
    "    df.loc[df['HouseFloor']>threshold,'HouseFloor'] = df.loc[df['HouseFloor']>threshold,'Floor']\n",
    "    df.loc[df['HouseFloor']==0,'HouseFloor'] = df.loc[df['HouseFloor']==0,'Floor']\n",
    "    df.loc[df['Floor']==0,'Floor'] = 1\n",
    "    return df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### подготовка `train.csv`:\n",
    "* правка выбросов по `HouseYear`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.loc[1497,'HouseYear'] = 2011\n",
    "data.loc[4189,'HouseYear'] = 1968\n",
    "data = pd.get_dummies(data)\n",
    "data = prepare_floor_house_floor(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### подготовка `test.csv`:\n",
    "*  в `HouseYear` выбросов нет"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_data = pd.get_dummies(test_data)\n",
    "test_data = prepare_floor_house_floor(test_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Функции подготовки в данных по различным признакам:\n",
    "`prepare_rooms`:\n",
    "* `sq_per_room` - среднее отношение жилой площади к количеству комнат (квартиры с 0 комнат в расчет не берутся)\n",
    "* квартиры, имеющие количество комнат больше `max_rooms` расчитываются как отношение жилой площади к `sq_per_room`\n",
    "* пропущенные значения расчитываются аналогично, но вместо жилой площади учитывается общая"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prepare_rooms(df, max_rooms=5):\n",
    "    sq_per_room = (df.loc[df['Rooms']!=0,'LifeSquare']/df.loc[df['Rooms']!=0,'Rooms']).mean()    \n",
    "    df.loc[df['Rooms'] > max_rooms, 'Rooms'] = round((df.loc[df['Rooms'] > max_rooms, 'LifeSquare'])/sq_per_room)\n",
    "    df.loc[pd.isna(df['Rooms']), 'Rooms'] = round((df.loc[pd.isna(df['Rooms']), 'Square'])/sq_per_room)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`prepare_square`:\n",
    "* все квартиры, имеющие площадь меньше порогового значения `threshold` (160 м2) и количество комнат 1, 2 или 3, группируются по количеству комнат (3 группы). \n",
    "* `_med_sq` - среднее значение площади квартиры по группам\n",
    "* все квартиры с количеством комныт 1, 2 или 3 превышающие по площади пороговое значение принимают среднее значение площади `_med_sq` в зависимости от количества комнат"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prepare_square(df, threshold=160):\n",
    "    _true_data = df.loc[(df['Square'] < threshold) & (df['Rooms'] > 0) & (df['Rooms'] < 4)]\n",
    "    _med_sq = _true_data.groupby(['Rooms'])[['Square']].mean()                                                          #MEAN!!!!!!!!!!!!!!!!!!!!!!!!!!\n",
    "    for i in (1,2,3):\n",
    "        df.loc[(df['Square'] > threshold) & (df['Rooms'] == i),'Square'] = _med_sq.loc[i,'Square']\n",
    "    return df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`prepare_healthcare_1`:\n",
    "* `df_hc_1` медианные значения `Healthcare_1` сгрупированные по районам\n",
    "* отсутствующие в `df_hc_1` значения заполняются средним по `df_hc_1`\n",
    "* отсутствующие значения признака `Healthcare_1` заменяются средним по текущему району из `df_hc_1`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prepare_healthcare_1(df):\n",
    "    df_hc_1 = df.groupby(['DistrictId'])[['Healthcare_1']].median()\n",
    "    df_hc_1['Healthcare_1'] = df_hc_1['Healthcare_1'].fillna(df_hc_1['Healthcare_1'].mean())\n",
    "    for d_ind in df_hc_1.index:\n",
    "        df.loc[(pd.isna(df['Healthcare_1'])) & (df['DistrictId'] == d_ind),'Healthcare_1'] = df_hc_1.loc[d_ind,'Healthcare_1']\n",
    "    return df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`prepare_kitchen`:\n",
    "* если площадь кухни больше `max_sq`, ее значение заменяется медианным по всей выборке"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prepare_kitchen(df, max_sq = 25):\n",
    "    df.loc[df['KitchenSquare']>max_sq,'KitchenSquare'] = df['KitchenSquare'].median()\n",
    "    return df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Функции создания в данных новых признаков:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`add_mean_price_per_square` - дебаляет среднюю цену за квадратный метр в районе"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def add_mean_price_per_square(df_X_train, df_y_train, df_valid, on_features=['DistrictId']):\n",
    "    df_train = df_X_train.join(df_y_train)\n",
    "    df_train['price_per_square'] = df_train['Price']/df_train['Square']\n",
    "    stat = df_train.groupby(on_features,as_index=False)[['price_per_square']].mean().rename(columns={'price_per_square':'mean_price_per_sq'})\n",
    "    df_train = df_train.merge(stat, on=on_features,how='left').drop('price_per_square',axis=1)\n",
    "    df_valid = df_valid.merge(stat, on=on_features,how='left')\n",
    "    _meanval = df_valid['mean_price_per_sq'].mean()\n",
    "    df_valid['mean_price_per_sq'] = df_valid['mean_price_per_sq'].fillna(_meanval)\n",
    "    return df_train.drop('Price',axis=1), df_valid"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`add_mean_price` - добавляет среднюю цену, в зависимости от количества комнат"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def add_mean_price(df_X_train, df_y_train, df_valid, on_features=['Rooms']):\n",
    "    df_train = df_X_train.join(df_y_train)\n",
    "    stat = df_train.groupby(on_features,as_index=False)[['Price']].mean().rename(columns={'Price':'mean_price'})\n",
    "    df_train = df_train.merge(stat, on=on_features,how='left')\n",
    "    _meantrain = df_train['Price'].mean()\n",
    "    df_train['mean_price'] = df_train['mean_price'].fillna(_meantrain)\n",
    "    df_valid = df_valid.merge(stat, on=on_features,how='left')\n",
    "    _meanvalid = df_valid['mean_price'].mean()\n",
    "    df_valid['mean_price'] = df_valid['mean_price'].fillna(_meanvalid)\n",
    "    return df_train.drop('Price',axis=1), df_valid"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`add_mean_square` - добавляет среднюю площадь в районе и в зависимости от количества комант"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def add_mean_square(df, on_features=['DistrictId','Rooms']):\n",
    "    stat = df.groupby(on_features,as_index=False)[['Square']].mean().rename(columns={'Square':'mean_Square'})\n",
    "    return df.merge(stat, on=on_features,how='left')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Общая функция подготовки данных:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def preproc_data(x_train_, y_train_, x_test):\n",
    "    x_train_, x_test = prepare_kitchen(x_train_), prepare_kitchen(x_test)\n",
    "    x_train_, x_test = prepare_rooms(x_train_), prepare_rooms(x_test)\n",
    "    x_train_, x_test = prepare_square(x_train_), prepare_square(x_test)\n",
    "    x_train_, x_test = prepare_healthcare_1(x_train_), prepare_healthcare_1(x_test)\n",
    "    \n",
    "    x_train_, x_test = add_mean_price_per_square(x_train_, y_train_, x_test)\n",
    "    x_train_, x_test = add_mean_square(x_train_), add_mean_square(x_test)\n",
    "    x_train_, x_test = add_mean_price(x_train_, y_train_, x_test)\n",
    "        \n",
    "    x_train_, x_test = x_train_.drop(['LifeSquare','Id'],axis=1), x_test.drop(['LifeSquare','Id'],axis=1)\n",
    "    return x_train_, x_test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Валидация модели"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Разделение на тренировочную и валидационную выборки на базе данных `train.csv`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X = data.drop('Price', axis=1)\n",
    "y = pd.DataFrame(data['Price'])\n",
    "X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.25, random_state=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Подготовка данных для обучения и валидации:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_valid = preproc_data(X_train, y_train, X_valid)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Проверка данных:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#X_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    " #X_valid.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#X_train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "#X_valid.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Применение модели `RandomForestRegressor`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Создание и обучение модели, предсказание на тестовой и валидационной выборках:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "model_rfr = RandomForestRegressor(random_state=1, n_estimators=150, max_depth=12, max_features = 5)\n",
    "model_rfr.fit(X_train, y_train.values[:, 0])\n",
    "y_pred_rfr = model_rfr.predict(X_valid)\n",
    "y_pred_train_rfr = model_rfr.predict(X_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Оценка R2 на тестовой и валидационной выборках:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# r2_valid:  0.7369359003887752\n",
      "# r2_train:  0.9053216193206162\n",
      "# diff:  0.16838571893184096\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "\n",
    "r2val = r2_score(y_valid, y_pred_rfr)\n",
    "r2tra = r2_score(y_train, y_pred_train_rfr)\n",
    "\n",
    "print('# r2_valid: ', r2val)  \n",
    "print('# r2_train: ', r2tra)\n",
    "print('# diff: ', r2tra - r2val)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Анализ наиболее важных признаков:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SUM_importances from 0 to 8:  0.777442380354143\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature_name</th>\n",
       "      <th>feature_importances</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Square</td>\n",
       "      <td>0.204616</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>mean_price_per_sq</td>\n",
       "      <td>0.159463</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>mean_Square</td>\n",
       "      <td>0.105253</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Rooms</td>\n",
       "      <td>0.097641</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>mean_price</td>\n",
       "      <td>0.072515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Social_2</td>\n",
       "      <td>0.056827</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>KitchenSquare</td>\n",
       "      <td>0.041063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Social_1</td>\n",
       "      <td>0.040065</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         feature_name  feature_importances\n",
       "2              Square             0.204616\n",
       "20  mean_price_per_sq             0.159463\n",
       "21        mean_Square             0.105253\n",
       "1               Rooms             0.097641\n",
       "22         mean_price             0.072515\n",
       "9            Social_2             0.056827\n",
       "3       KitchenSquare             0.041063\n",
       "8            Social_1             0.040065"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def get_feature_importances(model, feature_names, count=None):\n",
    "    _data = {'feature_name' : feature_names, 'feature_importances' : model.feature_importances_}\n",
    "    return pd.DataFrame(data=_data).sort_values('feature_importances', ascending=False).head(count)\n",
    "\n",
    "begin, end = 0, 8\n",
    "print(f'SUM_importances from {begin} to {end}: ', get_feature_importances(model_rfr, np.array(X_train.columns))[begin:end].feature_importances.values.sum())\n",
    "get_feature_importances(model_rfr, np.array(X_train.columns))[begin:end]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Предсказание цены на данных `test.csv`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Разделение на итоговую тренировочную и тестовую выборки"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_main_train = data.drop('Price', axis=1)\n",
    "y_main_train = pd.DataFrame(data['Price'])\n",
    "X_main_test = test_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Подготовка данных:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_main_train, X_main_test = preproc_data(X_main_train, y_main_train, X_main_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Проверка данных:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "#X_main_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "#X_main_test.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "#X_main_train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "#X_main_test.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Применение модели `RandomForestRegressor`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Создание и обучение модели на тренировочной выборке, предсказание на тестовой выборке:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "fin_model = RandomForestRegressor(random_state=1, n_estimators=150, max_depth=12, max_features = 5)\n",
    "fin_model.fit(X_main_train, y_main_train.values[:, 0])\n",
    "test_data['Price'] = fin_model.predict(X_main_test)\n",
    "y_train_pred  = fin_model.predict(X_main_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Оценка R2 на тренировочной выборке:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# r2_train:  0.8956360938009785\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "\n",
    "r2train = r2_score(y_main_train, y_train_pred)\n",
    "\n",
    "print('# r2_train: ', r2train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Анализ наиболее важных признаков:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SUM_importances from 0 to 5:  0.6512962648731999\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature_name</th>\n",
       "      <th>feature_importances</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Square</td>\n",
       "      <td>0.229108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>mean_price_per_sq</td>\n",
       "      <td>0.165556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>mean_Square</td>\n",
       "      <td>0.087845</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Rooms</td>\n",
       "      <td>0.087586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>mean_price</td>\n",
       "      <td>0.081202</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         feature_name  feature_importances\n",
       "2              Square             0.229108\n",
       "20  mean_price_per_sq             0.165556\n",
       "21        mean_Square             0.087845\n",
       "1               Rooms             0.087586\n",
       "22         mean_price             0.081202"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def get_feature_importances(model, feature_names, count=None):\n",
    "    _data = {'feature_name' : feature_names, 'feature_importances' : model.feature_importances_}\n",
    "    return pd.DataFrame(data=_data).sort_values('feature_importances', ascending=False).head(count)\n",
    "\n",
    "begin, end = 0, 5\n",
    "print(f'SUM_importances from {begin} to {end}: ', get_feature_importances(fin_model, np.array(X_main_train.columns))[begin:end].feature_importances.values.sum())\n",
    "get_feature_importances(fin_model, np.array(X_main_train.columns))[begin:end]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cохранение результата:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_data[['Id','Price']].to_csv('AChernenko_predictions.csv',index=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>725</td>\n",
       "      <td>161388.287716</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15856</td>\n",
       "      <td>227194.364745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5480</td>\n",
       "      <td>275827.462682</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>15664</td>\n",
       "      <td>298332.307642</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>14275</td>\n",
       "      <td>137377.234191</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Id          Price\n",
       "0    725  161388.287716\n",
       "1  15856  227194.364745\n",
       "2   5480  275827.462682\n",
       "3  15664  298332.307642\n",
       "4  14275  137377.234191"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data[['Id','Price']].head(5)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
© 2019 GitHub, Inc.
Terms
Privacy
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
